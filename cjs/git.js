"use strict";var e;Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,t){for(var o in t)Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}(exports,{cloneRepo:function(){return g},copyRepo:function(){return d},createRemoteRepo:function(){return s},deleteRemoteRepo:function(){return a},findAllRepos:function(){return l},findGithubAccount:function(){return c},initLocalRepo:function(){return m},initRepo:function(){return p},makeRepo:function(){return f},pushRepo:function(){return $},removeRepo:function(){return R},setLocalConfig:function(){return u}});const t=(e=require("path"))&&e.__esModule?e:{default:e},o=require("child_process"),n=require("./builtin.js"),i=require("./basic.js"),r=`${process.env.DEV_ROOT}/jd-environments`??"C:/JnJ/Developments/jd-environments",c=e=>(0,n.loadJson)(`${r}/Apis/github.json`)[e],l=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,s=(e,t)=>{console.log("####@@@@@ createRemoteRepo options: ",t);let{name:o,description:n,isPrivate:i}=t;return e.rest.repos.createForAuthenticatedUser({name:o,description:n,private:i,auto_init:!0})},a=(e,t,o)=>{let{name:n}=t;return console.log(`### deleteRemoteRepo: ${n}`),e.rest.repos.delete({owner:o.userName,repo:n})},u=(e,t,n)=>{let i=`cd ${n} && git config user.name "${t.fullName}"`;console.log(i+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`),(0,o.execSync)(i)},m=(e,t,n)=>{let{name:i}=e,{fullName:r,email:c,token:l,userName:s}=t,a=`cd ${n} && git init`;(0,o.execSync)(a);try{a="git branch -m master main",(0,o.execSync)(a)}catch(e){console.log("####@@@@@===== error: ",e)}console.log(a=`git config user.name "${r}" && git config user.email "${c}" && git remote add origin https://${l}@github.com/${s}/${i}.git && git add . && git commit -m "Initial commit"`),(0,o.execSync)(a)},g=(e,n,i)=>{let r=`cd ${t.default.dirname(i)} && git clone https://${n.token}@github.com/${n.userName}/${e.name}.git`;console.log(r),(0,o.execSync)(r)},p=(e,t,n,r)=>{let c=`xgit -e createRemoteRepo -u ${n.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;console.log(`initRepo cmd: ${c}`),(0,o.execSync)(c),(0,i.sleep)(10),g(t,n,r),(0,i.sleep)(5),u(t,n,r)},d=(e,t,o)=>{g(e,t,o),(0,i.sleep)(10),u(e,t,o)},$=(e,t,n)=>{if((0,o.execSync)(`cd ${n}`),(0,o.execSync)("git status --porcelain",{encoding:"utf8"}).length>0){let e='git add . && git commit -m "Initial commit"';console.log("#### ",e),(0,o.execSync)(e)}let i=(0,o.execSync)("git branch");console.log(`#### pushRepo branches: ${i}`),i.includes("main")?(0,o.execSync)("git push -u origin main --force"):i.includes("master")?(0,o.execSync)("git push -u origin master --force"):console.log("main 또는 master 브랜치가 없습니다.")},f=(e,t,n,r)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t));let c=`xgit -e createRemoteRepo -u ${n.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;console.log(`initRepo cmd: ${c}`),(0,o.execSync)(c),(0,i.sleep)(15),console.log(`=================== initLocalRepo: ${r}`),m(t,n,r),(0,i.sleep)(5),console.log(`=================== pushRepo: ${r}`),$(t,n,r)},R=(e,r,c,l)=>{a(e,r,c),(0,i.sleep)(10);let{name:s}=r;if("win"===n.PLATFORM)try{let e=`cd ${t.default.dirname(l)}`;console.log(e),(0,o.execSync)(e);let n=`rmdir /s /q ${s}`;console.log(n),(0,o.execSync)(n)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${l}"`;console.log("Trying alternative command:",e),(0,o.execSync)(e)}catch(e){console.error("Alternative removal also failed:",e)}}else{let e=`cd ${t.default.dirname(l)} && rm -rf ${s}`;console.log(e),(0,o.execSync)(e)}};
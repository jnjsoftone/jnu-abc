import*as e from"fs";import r from"path";let t=e=>e.replace(/^\uFEFF/gm,"").replace(/^\u00BB\u00BF/gm,"").replace(/\r\n/g,"\n"),n=e=>(e=e.replace(/\\/g,"/")).endsWith("/")?e.slice(0,-1):e,s=e=>(e.startsWith(".")&&(e=r.join(process.cwd(),e)),n(e)),i=e=>e?e.toString().normalize("NFKC"):"",c=e=>e?(e=i(e)).replace(/\[/g,"(").replace(/\]/g,")").replace(/[^\uAC00-\uD7A3a-zA-Z0-9_\(\)\<\>,\s]/g,"").replace(/\s+/g," ").trim():"",o=(r,n="utf8")=>{try{return t(e.readFileSync(s(r),{encoding:n}))}catch{return""}},l=(r,n="utf8")=>{try{return JSON.parse(t(e.readFileSync(s(r),{encoding:n})))}catch{return{}}},a=(t,n="",{encoding:i="utf-8",overwrite:c=!0,newFile:o=!0}={})=>{if(t=s(t),o&&e.existsSync(t)){let n=r.dirname(t),s=r.extname(t),i=r.basename(t,s),c=1;for(;e.existsSync(t);)t=r.join(n,`${i}(${c})${s}`),c++}e.mkdirSync(r.dirname(t),{recursive:!0}),c?e.writeFileSync(t,n,i):e.appendFileSync(t,n,i)},p=(e,r={},{indent:t=2,overwrite:n=!0,newFile:i=!1}={})=>{a(s(e),JSON.stringify(r,null,t),{overwrite:n,newFile:i})},d=r=>{e.mkdirSync(s(r),{recursive:!0})},y=(r,t,n=!0)=>{e.cpSync(s(r),s(t),{recursive:n})},u=(t,n="",s=[])=>{if(!e.existsSync(t))return[];let i=e.readdirSync(t);return s=s||[],i.forEach(function(i){e.statSync(t+"/"+i).isDirectory()?s=u(t+"/"+i,n,s):(n instanceof RegExp?n:new RegExp(n.replace(/\*/g,".*"))).test(i)&&s.push(r.join(t,"/",i))}),s};function g(t,s=""){let i=[];for(let c of e.readdirSync(t)){let o=r.join(t,c),l=s instanceof RegExp?s:new RegExp(s.replace(/\*/g,".*"));e.statSync(o).isDirectory()&&l.test(c)&&i.push(n(o))}return i}let m=r=>e.existsSync(r),f=r=>e.existsSync(r),S=r=>e.existsSync(r),F=(r,t,s,i)=>{r=n(r),t=n(t),e.rename(`${r}/${s}`,`${t}/${i}`,e=>console.log(e))},x=(r,t,s,i)=>{r=n(r),t=n(t),e.existsSync(t)||e.mkdirSync(t,{recursive:!0});for(let n=0;n<s.length;n++){let c=s[n],o=i[n];e.rename(`${r}/${c}`,`${t}/${o}`,e=>console.log(e))}},$=(r,t,n)=>(r=`${process.env.DIR_ROOT}/${r}`,t=e=>e.endsWith(".ts"),n=e=>`${r}/${e}`,e.readdirSync(r).filter(e=>t(e)).map(e=>n(e))),h=(t,n="node_modules/,.git/.DS_Store",s=!0)=>{try{if(!e.existsSync(t))return;let i=n.split(",").map(e=>e.endsWith("/")?e:e.includes("*")?RegExp("^"+e.replace(/\*/g,".*")+"$"):e);for(let c of e.readdirSync(t))try{let o=r.join(t,c),l=e.statSync(o);l.isDirectory()&&s?i.some(e=>"string"==typeof e&&e.endsWith("/")&&c+"/"===e)?e.rmSync(o,{recursive:!0,force:!0}):h(o,n,s):l.isFile()&&i.some(e=>e instanceof RegExp?e.test(c):c===e)&&e.unlinkSync(o)}catch(e){console.error(`Error processing ${c}: ${e.message}`);continue}return{folderPath:t,pattern:n}}catch(e){return console.error(`Error processing folder ${t}: ${e.message}`),{}}},E=(e,r)=>{let t=o(e);for(let[e,n]of Object.entries(r))t=t.replace(RegExp(e,"g"),n);a(e,t,{overwrite:!0,newFile:!1})};export{n as slashedFolder,i as composeHangul,s as setPath,c as sanitizeName,o as loadFile,l as loadJson,a as saveFile,p as saveJson,d as makeDir,y as copyDir,u as findFiles,g as findFolders,m as existsFolder,f as existsFile,S as exists,F as moveFile,x as moveFiles,$ as renameFilesInFolder,h as deleteFilesInFolder,E as substituteInFile};
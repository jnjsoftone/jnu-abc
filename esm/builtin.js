import*as e from"fs";import r from"path";let t=e=>e.replace(/^\uFEFF/gm,"").replace(/^\u00BB\u00BF/gm,"").replace(/\r\n/g,"\n"),n=e=>(e=e.replace(/\\/g,"/")).endsWith("/")?e.slice(0,-1):e,i=e=>(e.startsWith(".")&&(e=r.join(process.cwd(),e)),n(e)),s=e=>e?e.toString().normalize("NFKC"):"",c=e=>e?(e=s(e)).replace(/\[/g,"(").replace(/\]/g,")").replace(/[^\uAC00-\uD7A3a-zA-Z0-9_\(\)\<\>,\s]/g,"").replace(/\s+/g," ").trim():"",l=(r,n="utf8")=>{try{return t(e.readFileSync(i(r),{encoding:n}))}catch{return""}},o=(r,n="utf8")=>{try{return JSON.parse(t(e.readFileSync(i(r),{encoding:n})))}catch{return{}}},a=(r,n="utf8")=>{try{let s=t(e.readFileSync(i(r),{encoding:n}));if(!s)return{};let c=s.split("\n"),l={};for(let e of c){let r=e.split("="),[t,n]=[r[0].trim(),r.slice(1).join("=").trim()];!t||t.startsWith("#")||t.startsWith("//")||(l[t]=n.replace(/^['"]|['"]$/g,""))}return l}catch{return{}}},p=(r,t,n="utf8")=>{let s=Object.entries(t).map(([e,r])=>`${e}=${r}`).join("\n");e.writeFileSync(i(r),s,{encoding:n})},u=(t,n="",{encoding:s="utf-8",overwrite:c=!0,newFile:l=!0}={})=>{if(t=i(t),l&&e.existsSync(t)){let n=r.dirname(t),i=r.extname(t),s=r.basename(t,i),c=1;for(;e.existsSync(t);)t=r.join(n,`${s}(${c})${i}`),c++}e.mkdirSync(r.dirname(t),{recursive:!0}),c?e.writeFileSync(t,n,s):e.appendFileSync(t,n,s)},d=(e,r={},{indent:t=2,overwrite:n=!0,newFile:s=!1}={})=>{u(i(e),JSON.stringify(r,null,t),{overwrite:n,newFile:s})},y=r=>{e.mkdirSync(i(r),{recursive:!0})},f=(r,t,n=!0)=>{e.cpSync(i(r),i(t),{recursive:n})},m=(t,n="",i=[])=>{if(!e.existsSync(t))return[];let s=e.readdirSync(t);return i=i||[],s.forEach(function(s){e.statSync(t+"/"+s).isDirectory()?i=m(t+"/"+s,n,i):(n instanceof RegExp?n:new RegExp(n.replace(/\*/g,".*"))).test(s)&&i.push(r.join(t,"/",s))}),i};function g(t,i=""){let s=[];for(let c of e.readdirSync(t)){let l=r.join(t,c),o=i instanceof RegExp?i:new RegExp(i.replace(/\*/g,".*"));e.statSync(l).isDirectory()&&o.test(c)&&s.push(n(l))}return s}let S=r=>e.existsSync(r),F=r=>e.existsSync(r),$=r=>e.existsSync(r),x=(r,t,i,s)=>{r=n(r),t=n(t),e.rename(`${r}/${i}`,`${t}/${s}`,e=>console.log(e))},h=(r,t,i,s)=>{r=n(r),t=n(t),e.existsSync(t)||e.mkdirSync(t,{recursive:!0});for(let n=0;n<i.length;n++){let c=i[n],l=s[n];e.rename(`${r}/${c}`,`${t}/${l}`,e=>console.log(e))}},v=(r,t,n)=>(r=`${process.env.DIR_ROOT}/${r}`,t=e=>e.endsWith(".ts"),n=e=>`${r}/${e}`,e.readdirSync(r).filter(e=>t(e)).map(e=>n(e))),E=(t,n="node_modules/,.git/.DS_Store",i=!0)=>{try{if(!e.existsSync(t))return;let s=n.split(",").map(e=>e.endsWith("/")?e:e.includes("*")?RegExp("^"+e.replace(/\*/g,".*")+"$"):e);for(let c of e.readdirSync(t))try{let l=r.join(t,c),o=e.statSync(l);o.isDirectory()&&i?s.some(e=>"string"==typeof e&&e.endsWith("/")&&c+"/"===e)?e.rmSync(l,{recursive:!0,force:!0}):E(l,n,i):o.isFile()&&s.some(e=>e instanceof RegExp?e.test(c):c===e)&&e.unlinkSync(l)}catch(e){console.error(`Error processing ${c}: ${e.message}`);continue}return{folderPath:t,pattern:n}}catch(e){return console.error(`Error processing folder ${t}: ${e.message}`),{}}},j=(e,r)=>{let t=l(e);if(t){for(let[e,n]of Object.entries(r))t=t.replace(RegExp(e,"g"),n);u(e,t,{overwrite:!0,newFile:!1})}};export{n as slashedFolder,s as composeHangul,i as setPath,c as sanitizeName,l as loadFile,o as loadJson,a as loadEnv,u as saveFile,d as saveJson,p as saveEnv,y as makeDir,f as copyDir,m as findFiles,g as findFolders,S as existsFolder,F as existsFile,$ as exists,x as moveFile,h as moveFiles,v as renameFilesInFolder,E as deleteFilesInFolder,j as substituteInFile};
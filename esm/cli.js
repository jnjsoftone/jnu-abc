import{execSync as e}from"child_process";import r from"path";import{makeDir as o,saveFile as t,loadEnv as n,findFiles as i,findFolders as s,deleteFilesInFolder as l,substituteInFile as c}from"./builtin.js";import{findGithubAccount as p}from"./git.js";import a from"fs";let m=`${process.env.DEV_ROOT}/jd-templates`??"C:/JnJ/Developments/jd-templates",d="win32"===process.platform?"win":"darwin"===process.platform?"mac":"linux"===process.platform?"linux":process.platform,$={encoding:"utf8",shell:"win32"===process.platform?"cmd.exe":"/bin/sh"},u=()=>"win"===d?(e("chcp 65001>nul",{shell:"cmd.exe"}),e("cd",$).toString().trim().replace(/\\/g,"/")):e("pwd",$).toString().trim(),f=()=>"win"===d?(e("chcp 65001>nul",{shell:"cmd.exe"}),r.dirname(e("cd",$).toString().trim().replace(/\\/g,"/"))):r.dirname(e("pwd",$).toString().trim()),g=r=>{let o=e(r,{encoding:"utf8"});return o?o.toString().trim():""},h=e=>{let r=[];return e.forEach(e=>r.push(g(e))),r},w=(r,o=d)=>{let{template:t,repoName:i,userName:s,description:l}=r,{fullName:a,email:g}=p(s??""),h=f(),w=u(),x="";"win"===o?e(x=`xcopy "${m}\\${t}" "${i}\\" /E /I /H /Y`,$):e(x=`cp -r ${m}/${t} ${i}`,$);let _=[`${i}/package.json`,`${i}/README.md`,`${i}/docs/workflow.md`,`${i}/manifest.json`,`${i}/publish.sh`,`${i}/publish.bat`],b={"{{name}}":i??"","{{project-name}}":i??"","{{author}}":`${a} <${g}>`,"{{github-id}}":s??"","{{description}}":l||"","{{parent-dir}}":h,"{{current-dir}}":w};for(let e of _)c(e,b);let j=n(`${i}/.env.${o}`);if(console.log(`@@@@ env: ${j}`),j){let e="win"===o?"publish.bat":"publish.sh",r=Object.entries(j).map(([e,r])=>({[`{{${e}}}`]:String(r)})).reduce((e,r)=>({...e,...r}),{});console.log(`@@@@ replacements2: ${r}, @@@ file: ${e}`),c(`${i}/${e}`,{...b,...r})}return console.log(x=`cd ${w}/${i} && npm install`),e(x,$),console.log(x=`cd ${w}/${i} && xgit -e makeRepo -u ${s} -n ${i} -d "${l}"`),e(x,$),r},x=r=>(e(`xgit -e deleteRemoteRepo -u ${r.userName} -n ${r.repoName}`,$),"win"===d?e(`rmdir /s /q ${r.repoName}`,$):e(`rm -rf ${r.repoName}`,$),r),_=e=>{let{template:r,repoName:o,userName:t,description:n}=e;switch(r){case"node-simple":case"python-pipenv":break;case"ts-swc-npm":case"ts-webpack-obsidianPlugin":w(e)}return e},b=(o,t)=>{try{let n=r.resolve(o),i=r.basename(n),s=r.dirname(n),l=process.cwd();if("win"===d)try{process.chdir(s);let r=`${i}_temp`;for(let o of(e(`xcopy "${i}" "${r}\\" /E /I /H /Y`,$),t?t.split(","):["node_modules","package-lock.json","package.json"])){let t=`${r}/${o}`;try{o.includes("/")?e(`rmdir /s /q "${t}"`,$):e(`del /q "${t}"`,$)}catch(e){console.log(`Warning: Could not remove ${o}`)}}e(`powershell -Command "Compress-Archive -Path '${r}/*' -DestinationPath '${i}.zip' -Force"`,$),e(`rmdir /s /q "${r}"`,$)}catch(e){throw console.error("Error during zip operation:",e),e}finally{process.chdir(l)}else try{process.chdir(s);let r=t?t.split(",").map(e=>`"${e}"`).join(" "):'"*/node_modules/*" ".git/*"';e(`zip -r "${i}.zip" "${i}" -x ${r}`,$)}finally{process.chdir(l)}return{folderPath:o,excluded:t}}catch(e){throw console.error("Error in zip function:",e),e}},j=(t,n="__MACOSX/,node_modules/,.DS_Store,.git/")=>{let c=u(),p=[];for(let l of i(t,"*.zip"))try{let t;let i=`${c}/_unzip/${r.parse(l).name}`;if(console.log(`## extractPath: ${i}`),o(i),"win32"===process.platform)for(let o of(t=`powershell -command "Expand-Archive -Path '${l}' -DestinationPath '${i}' -Force"`,n.split(",").map(e=>e.trim()))){let t=r.join(i,o.replace("/",""));o.endsWith("/")?e(`if exist "${t}" rmdir /s /q "${t}"`,$):e(`if exist "${t}" del /q "${t}"`,$)}else{let e=n.split(",").map(e=>`"${e.trim()}"`).join(" ");t=`unzip -o "${l}" -d "${i}" -x ${e}`}e(t),console.log(`압축 해제 완료: ${l} -> ${i}`);let m=s(i).filter(e=>!e.includes("__MACOSX"));if(console.log(`### subFolders: ${m}, subFolders.length: ${m.length}, ${m[0]}`),1===m.length&&m[0].replace(i,"").includes(r.parse(l).name)){for(let o of(console.log(`### 중복 폴더 처리 필요: ${m}`),a.readdirSync(m[0]))){let t=r.join(m[0],o),n=r.join(i,o);"win32"===process.platform?e(`move "${t}" "${n}"`,$):e(`mv "${t}" "${n}"`,$)}"win32"===process.platform?e(`rmdir /s /q "${m[0]}"`,$):e(`rm -rf "${m[0]}"`,$)}p.push(i)}catch(e){console.error(`'${l}' 압축 해제 중 오류 발생:`,e.message)}return l(c,"__MACOSX/",!0),p.join(",")},y=r=>{{if("win"===d){let o=r.split(",").join("|")||"node_modules|dist|_backups|_drafts|types|docs";try{let r=`powershell -NoProfile -ExecutionPolicy Bypass -Command "$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8; tree /F /A | Select-String -NotMatch '${o}'"`;console.log("Command: ",r);let n=e(r,{encoding:"utf8",stdio:"pipe"});return console.log("Result: ",n),n&&t("tree.txt",n,{overwrite:!0,newFile:!1,encoding:"utf8"}),n||""}catch(e){return console.error("Error executing tree command:",e),""}}let o=r?`"${r.split(",").join("|")}"`:'"node_modules|dist|_backups|_drafts|types|docs"',n=`tree -I ${o} --dirsfirst -L 3`;try{console.log("Command: ",n);let r=e(n,{encoding:"utf8",stdio:"pipe"});return r&&t("tree.txt",r,{overwrite:!0,newFile:!1}),r||""}catch(e){return console.error("Error executing tree command:",e),""}}};export{m as TEMPLATES_ROOT,d as PLATFORM,$ as execOptions,g as exec,h as exe,f as getParentDir,u as getCurrentDir,_ as initApp,x as removeApp,b as zip,y as tree,j as unzip};
import{execSync as e}from"child_process";import r from"path";import{makeDir as o,saveFile as t,findFiles as i,findFolders as n,deleteFilesInFolder as s,substituteInFile as l}from"./builtin.js";import{findGithubAccount as c}from"./git.js";import p from"fs";let a=`${process.env.DEV_ROOT}/jd-templates`??"C:/JnJ/Developments/jd-templates",m="win32"===process.platform?"win":"darwin"===process.platform?"mac":"linux"===process.platform?"linux":process.platform,d={encoding:"utf8",shell:"win32"===process.platform?"cmd.exe":"/bin/sh"},$=()=>"win"===m?(e("chcp 65001>nul",{shell:"cmd.exe"}),e("cd",d).toString().trim().replace(/\\/g,"/")):e("pwd",d).toString().trim(),u=()=>"win"===m?(e("chcp 65001>nul",{shell:"cmd.exe"}),r.dirname(e("cd",d).toString().trim().replace(/\\/g,"/"))):r.dirname(e("pwd",d).toString().trim()),f=r=>{let o=e(r,{encoding:"utf8"});return o?o.toString().trim():""},g=e=>{let r=[];return e.forEach(e=>r.push(f(e))),r},h=r=>{let{template:o,repoName:t,userName:i,description:n}=r,{fullName:s,email:p}=c(i??""),f=u(),g=$(),h="";for(let r of("win"===m?e(h=`xcopy "${a}\\${o}" "${t}\\" /E /I /H /Y`,d):e(h=`cp -r ${a}/${o} ${t}`,d),[`${t}/package.json`,`${t}/README.md`,`${t}/docs/workflow.md`,`${t}/manifest.json`,`${t}/publish.sh`,`${t}/publish.bat`]))l(r,{"{{name}}":t??"","{{project-name}}":t??"","{{author}}":`${s} <${p}>`,"{{github-id}}":i??"","{{description}}":n||"","{{parent-dir}}":f,"{{current-dir}}":g});return console.log(h=`cd ${g}/${t} && npm install`),e(h,d),console.log(h=`cd ${g}/${t} && xgit -e makeRepo -u ${i} -n ${t} -d "${n}"`),e(h,d),r},w=r=>(e(`xgit -e deleteRemoteRepo -u ${r.userName} -n ${r.repoName}`,d),"win"===m?e(`rmdir /s /q ${r.repoName}`,d):e(`rm -rf ${r.repoName}`,d),r),x=e=>{let{template:r,repoName:o,userName:t,description:i}=e;switch(r){case"node-simple":case"python-pipenv":break;case"ts-swc-npm":case"ts-webpack-obsidianPlugin":h(e)}return e},_=(o,t)=>{try{let i=r.resolve(o),n=r.basename(i),s=r.dirname(i),l=process.cwd();if("win"===m)try{process.chdir(s);let r=`${n}_temp`;for(let o of(e(`xcopy "${n}" "${r}\\" /E /I /H /Y`,d),t?t.split(","):["node_modules","package-lock.json","package.json"])){let t=`${r}/${o}`;try{o.includes("/")?e(`rmdir /s /q "${t}"`,d):e(`del /q "${t}"`,d)}catch(e){console.log(`Warning: Could not remove ${o}`)}}e(`powershell -Command "Compress-Archive -Path '${r}/*' -DestinationPath '${n}.zip' -Force"`,d),e(`rmdir /s /q "${r}"`,d)}catch(e){throw console.error("Error during zip operation:",e),e}finally{process.chdir(l)}else try{process.chdir(s);let r=t?t.split(",").map(e=>`"${e}"`).join(" "):'"*/node_modules/*" ".git/*"';e(`zip -r "${n}.zip" "${n}" -x ${r}`,d)}finally{process.chdir(l)}return{folderPath:o,excluded:t}}catch(e){throw console.error("Error in zip function:",e),e}},j=(t,l="__MACOSX/,node_modules/,.DS_Store,.git/")=>{let c=$(),a=[];for(let s of i(t,"*.zip"))try{let t;let i=`${c}/_unzip/${r.parse(s).name}`;if(console.log(`## extractPath: ${i}`),o(i),"win32"===process.platform)for(let o of(t=`powershell -command "Expand-Archive -Path '${s}' -DestinationPath '${i}' -Force"`,l.split(",").map(e=>e.trim()))){let t=r.join(i,o.replace("/",""));o.endsWith("/")?e(`if exist "${t}" rmdir /s /q "${t}"`,d):e(`if exist "${t}" del /q "${t}"`,d)}else{let e=l.split(",").map(e=>`"${e.trim()}"`).join(" ");t=`unzip -o "${s}" -d "${i}" -x ${e}`}e(t),console.log(`압축 해제 완료: ${s} -> ${i}`);let m=n(i).filter(e=>!e.includes("__MACOSX"));if(console.log(`### subFolders: ${m}, subFolders.length: ${m.length}, ${m[0]}`),1===m.length&&m[0].replace(i,"").includes(r.parse(s).name)){for(let o of(console.log(`### 중복 폴더 처리 필요: ${m}`),p.readdirSync(m[0]))){let t=r.join(m[0],o),n=r.join(i,o);"win32"===process.platform?e(`move "${t}" "${n}"`,d):e(`mv "${t}" "${n}"`,d)}"win32"===process.platform?e(`rmdir /s /q "${m[0]}"`,d):e(`rm -rf "${m[0]}"`,d)}a.push(i)}catch(e){console.error(`'${s}' 압축 해제 중 오류 발생:`,e.message)}return s(c,"__MACOSX/",!0),a.join(",")},y=r=>{{if("win"===m){let o=r.split(",").join("|")||"node_modules|dist|_backups|_drafts|types|docs";try{let r=`powershell -NoProfile -ExecutionPolicy Bypass -Command "$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8; tree /F /A | Select-String -NotMatch '${o}'"`;console.log("Command: ",r);let i=e(r,{encoding:"utf8",stdio:"pipe"});return console.log("Result: ",i),i&&t("tree.txt",i,{overwrite:!0,newFile:!1,encoding:"utf8"}),i||""}catch(e){return console.error("Error executing tree command:",e),""}}let o=r?`"${r.split(",").join("|")}"`:'"node_modules|dist|_backups|_drafts|types|docs"',i=`tree -I ${o} --dirsfirst -L 3`;try{console.log("Command: ",i);let r=e(i,{encoding:"utf8",stdio:"pipe"});return r&&t("tree.txt",r,{overwrite:!0,newFile:!1}),r||""}catch(e){return console.error("Error executing tree command:",e),""}}};export{a as TEMPLATES_ROOT,m as PLATFORM,d as execOptions,f as exec,g as exe,u as getParentDir,$ as getCurrentDir,x as initApp,w as removeApp,_ as zip,y as tree,j as unzip};
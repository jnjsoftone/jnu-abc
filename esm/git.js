import e from"path";import{execSync as o}from"child_process";import{loadJson as t}from"./builtin.js";import{sleep as i}from"./basic.js";import{PLATFORM as r}from"./cli.js";let n=`${process.env.DEV_ROOT}/jd-environments`??"C:/JnJ/Developments/jd-environments",l=e=>t(`${n}/Apis/github.json`)[e],s=async e=>(await e.rest.repos.listForAuthenticatedUser({per_page:100,sort:"updated"})).data,c=(e,o)=>{console.log("####@@@@@ createRemoteRepo options: ",o);let{name:t,description:i,isPrivate:r}=o;return e.rest.repos.createForAuthenticatedUser({name:t,description:i,private:r,auto_init:!0})},a=(e,o,t)=>{let{name:i}=o;return console.log(`### deleteRemoteRepo: ${i}`),e.rest.repos.delete({owner:t.userName,repo:i})},m=(e,t,i)=>{let r=`cd ${i} && git config user.name "${t.fullName}"`;console.log(r+=` && git config user.email "${t.email}" && git remote set-url origin https://${t.token}@github.com/${t.userName}/${e.name}.git`),o(r)},g=(e,t,i)=>{let{name:r}=e,{fullName:n,email:l,token:s,userName:c}=t,a=`cd ${i} && git init`;o(a);try{a="git branch -m master main",o(a)}catch(e){console.log("####@@@@@===== error: ",e)}console.log(a=`git config user.name "${n}" && git config user.email "${l}" && git remote add origin https://${s}@github.com/${c}/${r}.git && git add . && git commit -m "Initial commit"`),o(a)},p=(t,i,r)=>{let n=`cd ${e.dirname(r)} && git clone https://${i.token}@github.com/${i.userName}/${t.name}.git`;console.log(n),o(n)},d=(e,t,r,n)=>{let l=`xgit -e createRemoteRepo -u ${r.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;console.log(`initRepo cmd: ${l}`),o(l),i(10),p(t,r,n),i(5),m(t,r,n)},$=(e,o,t)=>{p(e,o,t),i(10),m(e,o,t)},u=(e,t,i)=>{if(o(`cd ${i}`),o("git status --porcelain",{encoding:"utf8"}).length>0){let e='git add . && git commit -m "Initial commit"';console.log("#### ",e),o(e)}let r=o("git branch");console.log(`#### pushRepo branches: ${r}`),r.includes("main")?o("git push -u origin main --force"):r.includes("master")?o("git push -u origin master --force"):console.log("main 또는 master 브랜치가 없습니다.")},R=(e,t,r,n)=>{console.log("####@@@@@===== makeRepo options: ",JSON.stringify(t));let l=`xgit -e createRemoteRepo -u ${r.userName} -n ${t.name} -d "${t.description}" -p ${t.isPrivate}`;console.log(`initRepo cmd: ${l}`),o(l),i(15),console.log(`=================== initLocalRepo: ${n}`),g(t,r,n),i(5),console.log(`=================== pushRepo: ${n}`),u(t,r,n)},h=(t,n,l,s)=>{a(t,n,l),i(10);let{name:c}=n;if("win"===r)try{let t=`cd ${e.dirname(s)}`;console.log(t),o(t);let i=`rmdir /s /q ${c}`;console.log(i),o(i)}catch(e){console.error("Failed to remove directory:",e);try{let e=`rd /s /q "${s}"`;console.log("Trying alternative command:",e),o(e)}catch(e){console.error("Alternative removal also failed:",e)}}else{let t=`cd ${e.dirname(s)} && rm -rf ${c}`;console.log(t),o(t)}};export{l as findGithubAccount,s as findAllRepos,c as createRemoteRepo,a as deleteRemoteRepo,p as cloneRepo,m as setLocalConfig,g as initLocalRepo,d as initRepo,$ as copyRepo,u as pushRepo,R as makeRepo,h as removeRepo};